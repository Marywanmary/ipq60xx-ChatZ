name: OpenWrt固件编译

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '分支'
        required: true
        default: 'immwrt'
        type: choice
        options:
        - immwrt
        - openwrt
        - libwrt
      chip:
        description: '芯片架构'
        required: true
        default: 'ipq60xx'
        type: choice
        options:
        - ipq60xx
      config:
        description: '配置'
        required: true
        default: 'Ultra'
        type: choice
        options:
        - Ultra
        - Max
        - Pro

env:
  REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 安装依赖
      run: |
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo timedatectl set-timezone "$TZ"
        
    - name: 设置缓存
      uses: actions/cache@v3
      with:
        path: |
          dl/
          feeds/
          .ccache
          staging_dir/
          build_dir/
          toolchain/
        key: ${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}-${{ hashFiles('configs/*.config') }}
        restore-keys: |
          ${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}-
          ${{ inputs.chip }}-${{ inputs.branch }}-
          ${{ inputs.chip }}-
          
    - name: 显示缓存状态
      run: |
        echo "缓存状态:"
        if [ -d "dl" ]; then
          echo "dl 目录存在，大小: $(du -sh dl | cut -f1)"
        else
          echo "dl 目录不存在"
        fi
        
        if [ -d "feeds" ]; then
          echo "feeds 目录存在，大小: $(du -sh feeds | cut -f1)"
        else
          echo "feeds 目录不存在"
        fi
        
        if [ -d ".ccache" ]; then
          echo "ccache 目录存在，大小: $(du -sh .ccache | cut -f1)"
        else
          echo "ccache 目录不存在"
        fi
        
        if [ -d "staging_dir" ]; then
          echo "staging_dir 目录存在，大小: $(du -sh staging_dir | cut -f1)"
        else
          echo "staging_dir 目录不存在"
        fi
        
        if [ -d "build_dir" ]; then
          echo "build_dir 目录存在，大小: $(du -sh build_dir | cut -f1)"
        else
          echo "build_dir 目录不存在"
        fi
        
        if [ -d "toolchain" ]; then
          echo "toolchain 目录存在，大小: $(du -sh toolchain | cut -f1)"
        else
          echo "toolchain 目录不存在"
        fi
        
    - name: 初始化环境
      run: |
        chmod +x scripts/*.sh
        ./scripts/script.sh
        
    - name: 合并配置文件
      run: |
        cat configs/${{ inputs.chip }}_base.config configs/${{ inputs.branch }}_base.config configs/${{ inputs.config }}.config > .config
        echo "合并后的配置文件前200行："
        head -n 200 .config
        
    - name: 获取设备列表
      id: devices
      run: |
        # 获取所有被选中的设备
        SELECTED_DEVICES=$(grep -oE "CONFIG_TARGET_DEVICE_[^_]+_DEVICE_[^=]+=y" .config | sed 's/CONFIG_TARGET_DEVICE_[^_]*_DEVICE_//g' | sed 's/=y//g' | tr '\n' ' ')
        
        # 检查设备数量
        DEVICE_COUNT=$(echo "$SELECTED_DEVICES" | wc -w)
        
        if [ $DEVICE_COUNT -eq 0 ]; then
          echo "错误：未找到任何选中的设备配置"
          exit 1
        fi
        
        echo "检测到 $DEVICE_COUNT 个设备: $SELECTED_DEVICES"
        echo "devices=$SELECTED_DEVICES" >> $GITHUB_OUTPUT
        
    - name: 获取内核版本
      id: kernel_version
      run: |
        KERNEL_VERSION=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
        echo "内核版本: $KERNEL_VERSION"
        echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
        
    - name: 编译固件
      run: |
        ./scripts/build.sh ${{ inputs.chip }} ${{ inputs.branch }} ${{ inputs.config }} "${{ steps.devices.outputs.devices }}"
        
    - name: 上传产出物
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.chip }}-${{ inputs.branch }}-${{ inputs.config }}
        path: |
          output/
        retention-days: 30
        
  release:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 下载所有产出物
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
        
    - name: 准备发布
      run: |
        # 创建临时目录
        mkdir -p release_temp
        
        # 移动所有产出物到临时目录
        cp -r artifacts/* release_temp/
        
        # 获取内核版本
        KERNEL_VERSION=""
        if [ -f "release_temp/*/build.log" ]; then
          KERNEL_VERSION=$(grep -oE "Linux version [0-9]+\.[0-9]+\.[0-9]+" release_temp/*/build.log | head -1 | cut -d' ' -f3)
        fi
        
        # 获取luci-app列表
        LUCI_APPS=""
        if [ -d "release_temp" ]; then
          LUCI_APPS=$(find release_temp -name "*.manifest" -exec cat {} \; | grep -oE "luci-app-[a-zA-Z0-9_-]+" | sort | uniq | sed 's/^/- /g')
        fi
        
        # 创建发布说明
        cat > release_temp/README.md << EOF
        ## OpenWrt固件
        
        ### 默认信息
        - 默认管理地址: 192.168.111.1
        - 默认用户: root
        - 默认密码: none
        - 默认WIFI密码: 12345678
        
        ### 固件信息
        - 支持设备: ${{ steps.devices.outputs.devices }}
        - 内核版本: $KERNEL_VERSION
        - 作者: Mary
        - 发布时间: $(date +%Y-%m-%d)
        
        ### luci-app列表
        $LUCI_APPS
        EOF
        
    - name: 创建Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: $(date +%Y-%m-%d)-${{ inputs.chip }}
        name: OpenWrt固件 $(date +%Y-%m-%d)
        body_path: release_temp/README.md
        files: release_temp/**
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
