name: ipq60xx-ChatZ
on:
  workflow_dispatch:
    inputs:
      chip_arch:
        description: '芯片架构'
        required: true
        default: 'ipq60xx'
        type: choice
        options:
        - ipq60xx
        - ipq80xx
        - mtk

env:
  TZ: Asia/Shanghai

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      date_tag: ${{ steps.date.outputs.tag }}
    steps:
    - name: 设置日期标签
      id: date
      run: echo "tag=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

    - name: 生成编译矩阵
      id: set-matrix
      run: |
        # 生成包含完整信息的矩阵
        matrix=$(jq -n -c --argjson repos '[
          {"repo": "immwrt", "url": "https://github.com/laipeng668/immortalwrt.git", "branch": "master"},
          {"repo": "openwrt", "url": "https://github.com/laipeng668/openwrt.git", "branch": "master"},
          {"repo": "libwrt", "url": "https://github.com/laipeng668/openwrt-6.x.git", "branch": "k6.12-nss"}
        ]' --argjson configs '["Ultra", "Max", "Pro"]' '
          [$repos[] | . as $repo | $configs[] | {
            repo: $repo.repo,
            config: .,
            url: $repo.url,
            branch: $repo.branch
          }]
        ')
        echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false
    outputs:
      artifacts: ${{ steps.collect.outputs.artifacts }}
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 初始化环境
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget time

    - name: 缓存恢复
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          dl
          feeds
          .ccache
          build_dir
          staging_dir
          toolchain
        key: cache-${{ matrix.repo }}-${{ github.event.inputs.chip_arch }}-${{ matrix.config }}-${{ hashFiles('configs/**') }}
        restore-keys: |
          cache-${{ matrix.repo }}-${{ github.event.inputs.chip_arch }}-${{ matrix.config }}-
          cache-${{ matrix.repo }}-${{ github.event.inputs.chip_arch }}-

    - name: 显示缓存状态
      run: |
        echo "=== 缓存状态报告 ==="
        echo "缓存键: ${{ steps.cache-restore.outputs.cache-primary-key }}"
        echo "缓存命中: ${{ steps.cache-restore.outputs.cache-hit }}"
        [ -d dl ] && echo "DL缓存大小: $(du -sh dl | cut -f1)" || echo "DL缓存: 未命中"
        [ -d .ccache ] && echo "CCache大小: $(du -sh .ccache | cut -f1)" || echo "CCache: 未命中"

    - name: 克隆源码
      run: |
        # 直接使用矩阵中的URL和分支信息
        git clone --depth 1 -b "${{ matrix.branch }}" "${{ matrix.url }}" openwrt
        cd openwrt
        echo "REPO_SHORT=${{ matrix.repo }}" >> $GITHUB_ENV
        echo "克隆完成: ${{ matrix.repo }} - ${{ matrix.branch }}"

    - name: 合并配置文件
      id: config
      run: |
        cd openwrt
        # 合并配置文件（芯片 < 分支 < 软件包）
        cat ../configs/${{ github.event.inputs.chip_arch }}_base.config \
            ../configs/${{ matrix.repo }}_base.config \
            ../configs/${{ matrix.config }}.config > .config
        
        # 提取设备名称
        DEVICE_NAME=$(grep -oP 'CONFIG_TARGET_DEVICE_.*_DEVICE_\K.*(?==y)' .config | head -1)
        echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
        echo "设备名称: $DEVICE_NAME"

    - name: 准备编译环境
      run: |
        cd openwrt
        # 执行预置脚本
        bash ../scripts/script.sh
        # 更新feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        # 准备工具链
        make defconfig

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        # 设置编译参数
        export CCACHE_DIR="$PWD/../.ccache"
        export CCACHE_COMPRESS=1
        export CCACHE_MAXSIZE=5G
        
        # 编译并记录时间
        start_time=$(date +%s)
        make -j$(nproc) 2>&1 | tee build.log
        end_time=$(date +%s)
        
        # 检查编译状态
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "::error::编译失败！保存错误日志..."
          tail -n 1000 build.log > error.log
          exit 1
        fi
        
        echo "编译耗时: $((end_time - start_time)) 秒"
        echo "编译成功！"

    - name: 收集产出物
      id: collect
      if: success()
      run: |
        cd openwrt
        # 创建临时目录
        mkdir -p ../artifacts
        
        # 处理固件文件
        for bin in bin/targets/*/*/*.bin; do
          if [[ $bin =~ .*${{ github.event.inputs.chip_arch }}.*-(factory|sysupgrade)\.bin$ ]]; then
            type=$(basename "$bin" | sed -n 's/.*-\(factory\|sysupgrade\)\.bin/\1/p')
            new_name="${{ env.REPO_SHORT }}-${{ github.event.inputs.chip_arch }}-${{ env.DEVICE_NAME }}-${type}-${{ matrix.config }}.bin"
            cp "$bin" "../artifacts/$new_name"
          fi
        done
        
        # 处理配置文件
        cp .config "../artifacts/${{ env.REPO_SHORT }}-${{ github.event.inputs.chip_arch }}-${{ env.DEVICE_NAME }}-${{ matrix.config }}.config"
        [ -f .config.buildinfo ] && cp .config.buildinfo "../artifacts/${{ env.REPO_SHORT }}-${{ github.event.inputs.chip_arch }}-${{ env.DEVICE_NAME }}-${{ matrix.config }}.config.buildinfo"
        [ -f .manifest ] && cp .manifest "../artifacts/${{ env.REPO_SHORT }}-${{ github.event.inputs.chip_arch }}-${{ env.DEVICE_NAME }}-${{ matrix.config }}.manifest"
        
        # 收集软件包
        mkdir -p ../artifacts/packages
        find bin/packages -name "*.ipk" -exec cp {} ../artifacts/packages/ \;
        
        # 生成产物清单
        echo "artifacts=$(ls ../artifacts | jq -R . | jq -s .)" >> $GITHUB_OUTPUT

    - name: 保存缓存
      if: always()
      uses: actions/cache/save@v4
      with:
        path: |
          dl
          feeds
          .ccache
          build_dir
          staging_dir
          toolchain
        key: ${{ steps.cache-restore.outputs.cache-primary-key }}

    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.repo }}-${{ matrix.config }}-${{ github.event.inputs.chip_arch }}
        path: artifacts/
        retention-days: 7

  release:
    needs: [prepare, build]
    runs-on: ubuntu-22.04
    steps:
    - name: 下载所有产物
      uses: actions/download-artifact@v4
      with:
        path: all_artifacts

    - name: 整理产出物
      run: |
        # 创建分类目录
        mkdir -p release/{config,log,app}
        
        # 处理配置文件
        find all_artifacts -name "*.config*" -exec cp {} release/config/ \;
        tar -czf release/${{ github.event.inputs.chip_arch }}-config.tar.gz -C release/config .
        
        # 处理日志文件
        find all_artifacts -name "*.log" -exec cp {} release/log/ \;
        tar -czf release/${{ github.event.inputs.chip_arch }}-log.tar.gz -C release/log .
        
        # 处理软件包
        find all_artifacts -name "*.ipk" -exec cp {} release/app/ \;
        tar -czf release/${{ github.event.inputs.chip_arch }}-app.tar.gz -C release/app .
        
        # 移动固件文件
        find all_artifacts -name "*.bin" -exec mv {} release/ \;

    - name: 生成Release说明
      run: |
        # 获取内核版本（从任意config文件）
        KERNEL_VER=$(grep -oP 'CONFIG_LINUX_KERNEL=\K.*' release/config/*.config | head -1 | tr -d '"')
        
        # 获取luci-app列表
        LUCI_APPS=$(find release/app -name "luci-app-*.ipk" | sed 's/.*luci-app-/  - /; s/_.*$//' | sort -u)
        
        # 生成说明文档
        cat > release/body.md << EOF
        ### 默认信息
        - **管理地址**: 192.168.111.1
        - **用户名**: root
        - **密码**: none
        - **WiFi密码**: 12345678
        
        ### 固件信息
        - **包含设备**: 京东云亚瑟、雅典娜
        - **内核版本**: $KERNEL_VER
        - **作者**: Mary
        - **发布时间**: $(date +'%Y-%m-%d %H:%M:%S')
        
        ### 已安装Luci应用
        $LUCI_APPS
        
        ### 文件说明
        - 固件文件：直接刷入使用
        - ${{ github.event.inputs.chip_arch }}-config.tar.gz：所有配置文件
        - ${{ github.event.inputs.chip_arch }}-log.tar.gz：编译日志
        - ${{ github.event.inputs.chip_arch }}-app.tar.gz：软件包
        EOF

    - name: 创建Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.prepare.outputs.date_tag }}-${{ github.event.inputs.chip_arch }}
        name: OpenWrt固件 ${{ needs.prepare.outputs.date_tag }}
        body_path: release/body.md
        files: |
          release/*.bin
          release/*.tar.gz
        draft: false
        prerelease: false
